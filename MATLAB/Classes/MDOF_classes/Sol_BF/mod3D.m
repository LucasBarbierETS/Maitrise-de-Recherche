function out = model
%
% mod3D.m
%
% Model exported on Jan 12 2025, 21:39 by COMSOL 6.2.0.415.

import com.comsol.model.*
import com.comsol.model.util.*

model = ModelUtil.create('Model');

model.modelPath('C:\Users\lucas.barbier\OneDrive - ETS\CRIAQ-REAR\Maitrise LB\MATLAB\Classes\MDOF_classes\Sol_BF');

model.param.set('Wx', '0.03[m]', 'largeur du tube (direction x)');
model.param.set('Wy', '0.03[m]', 'largeur du tube (direction y)');
model.param.set('D12', '20[mm]', 'distance entre les deux microphones');
model.param.set('D23', '35[mm]', ['distance entre le deuxi' native2unicode(hex2dec({'00' 'e8'}), 'unicode') 'me microphone et le domaine thermo-visqueux']);
model.param.set('D3S', '5[mm]', 'distance entre le domaine thermovisqueux et la solution');
model.param.set('t', '0.002', [native2unicode(hex2dec({'00' 'e9'}), 'unicode') 'paisseur de la premi' native2unicode(hex2dec({'00' 'e8'}), 'unicode') 're plaque']);

model.variable.create('var1');
model.variable('var1').set('co', '348.9679', 'Vitesse du son');
model.variable('var1').set('cp', '0.24263', ['Capacit' native2unicode(hex2dec({'00' 'e9'}), 'unicode') ' thermique ' native2unicode(hex2dec({'00' 'e0'}), 'unicode') ' pression constante']);
model.variable('var1').set('kappa', '6.1686e-06', ['Conductivit' native2unicode(hex2dec({'00' 'e9'}), 'unicode') ' thermique']);
model.variable('var1').set('neta', '1.8496e-05', ['Viscosit' native2unicode(hex2dec({'00' 'e9'}), 'unicode')  native2unicode(hex2dec({'00' 'e9'}), 'unicode') ' dynamique']);
model.variable('var1').set('rho0', '1.2414', 'Masse volumique de l''air');
model.variable('var1').set('gamma', '1.4003', 'Masse volumique de l''air');

model.component.create('comp1', true);

model.component('comp1').geom.create('geom1', 3);
model.component('comp1').geom('geom1').create('blk1', 'Block');
model.component('comp1').geom('geom1').feature('blk1').set('pos', {'-Wx/2' '-Wy/2' 'D23 + D3S'});
model.component('comp1').geom('geom1').feature('blk1').set('size', {'Wx' 'Wy' 'D12'});
model.component('comp1').geom('geom1').create('blk2', 'Block');
model.component('comp1').geom('geom1').feature('blk2').set('pos', {'-Wx/2' '-Wy/2' 'D3S'});
model.component('comp1').geom('geom1').feature('blk2').set('size', {'Wx' 'Wy' 'D23'});
model.component('comp1').geom('geom1').create('blk3', 'Block');
model.component('comp1').geom('geom1').feature('blk3').set('pos', {'-Wx/2' '-Wy/2' '0'});
model.component('comp1').geom('geom1').feature('blk3').set('size', {'Wx' 'Wy' 'D3S'});
model.component('comp1').geom('geom1').create('cyl1', 'Cylinder');
model.component('comp1').geom('geom1').feature('cyl1').set('pos', {'0' '-Wy/2 + 0.015' '-0.002'});
model.component('comp1').geom('geom1').feature('cyl1').set('r', '0.001');
model.component('comp1').geom('geom1').feature('cyl1').set('h', '0.002');
model.component('comp1').geom('geom1').create('arr1', 'Array');
model.component('comp1').geom('geom1').feature('arr1').selection('input').set({'blk1'});
model.component('comp1').geom('geom1').feature('arr1').selection('input').init;
model.component('comp1').geom('geom1').feature('arr1').selection('input').set({'cyl1'});
model.component('comp1').geom('geom1').feature('arr1').set('type', 'three-dimensional');
model.component('comp1').geom('geom1').feature('arr1').set('fullsize', [1 1 1]);
model.component('comp1').geom('geom1').feature('arr1').set('displ', {'0.0145' '0.015' '0'});
model.component('comp1').geom('geom1').create('bc1', 'Block');
model.component('comp1').geom('geom1').feature('bc1').set('pos', {'-Wx/2' '-Wy/2' '-0.06'});
model.component('comp1').geom('geom1').feature('bc1').set('size', {'Wx' 'Wy' '0.058'});
model.component('comp1').geom('geom1').run;
model.component('comp1').geom('geom1').run('fin');
model.component('comp1').geom('geom1').run('fin');

model.component('comp1').selection.create('box_tube', 'Box');
model.component('comp1').selection('box_tube').set('entitydim', 3);
model.component('comp1').selection('box_tube').set('zmin', 'D3S - 0.01[mm]');
model.component('comp1').selection('box_tube').set('condition', 'inside');
model.component('comp1').selection.create('box_mat', 'Box');
model.component('comp1').selection('box_mat').set('entitydim', 3);
model.component('comp1').selection('box_mat').set('zmax', 'D3S + 0.01[mm]');
model.component('comp1').selection('box_mat').set('condition', 'inside');
model.component('comp1').selection.create('box_src', 'Box');
model.component('comp1').selection('box_src').set('entitydim', 2);
model.component('comp1').selection('box_src').set('zmin', 'D12+D23+D3S-0.01[mm]');
model.component('comp1').selection('box_src').set('zmax', 'D12+D23+D3S+0.01[mm]');
model.component('comp1').selection('box_src').set('condition', 'inside');
model.component('comp1').selection.create('box_mic', 'Box');
model.component('comp1').selection('box_mic').set('entitydim', 2);
model.component('comp1').selection('box_mic').set('zmin', 'D23+D3S-0.01[mm]');
model.component('comp1').selection('box_mic').set('zmax', 'D23+D3S+0.01[mm]');
model.component('comp1').selection('box_mic').set('condition', 'inside');
model.component('comp1').selection.create('box_bnd_tva', 'Box');
model.component('comp1').selection('box_bnd_tva').set('entitydim', 2);
model.component('comp1').selection('box_bnd_tva').set('zmin', 'D3S-0.01[mm]');
model.component('comp1').selection('box_bnd_tva').set('zmax', 'D3S+0.01[mm]');
model.component('comp1').selection('box_mic').set('condition', 'inside');
model.component('comp1').selection.create('box_bnd_lyr', 'Box');
model.component('comp1').selection('box_bnd_lyr').set('entitydim', 2);
model.component('comp1').selection('box_bnd_lyr').set('zmax', 'D3S + 0.01[mm]');
model.component('comp1').selection('box_bnd_lyr').set('condition', 'inside');
model.component('comp1').selection.create('box3', 'Box');
model.component('comp1').selection('box3').label('holes');
model.component('comp1').selection('box3').set('xmin', '-Wx/2 + 0.01[mm]');
model.component('comp1').selection('box3').set('zmin', '-(t + 0.01[mm])');
model.component('comp1').selection('box3').set('zmax', '0.01[mm]');
model.component('comp1').selection('box3').set('condition', 'inside');
model.component('comp1').selection.create('box2', 'Box');
model.component('comp1').selection('box2').label('holes faces');
model.component('comp1').selection('box2').set('entitydim', 2);
model.component('comp1').selection('box2').set('xmin', '-Wx/2 + 0.01[mm]');
model.component('comp1').selection('box2').set('zmin', '-(t + 0.01[mm])');
model.component('comp1').selection('box2').set('zmax', '0.01[mm]');
model.component('comp1').selection('box2').set('condition', 'inside');
model.component('comp1').selection.create('box1', 'Box');
model.component('comp1').selection('box1').label('holes side faces');
model.component('comp1').selection('box1').set('entitydim', 2);
model.component('comp1').selection('box1').set('zmax', '-0.01[mm]');
model.component('comp1').selection('box1').set('zmin', '-t + 0.01[mm]');
model.component('comp1').selection('box1').set('condition', 'intersects');
model.component('comp1').selection.create('dif1', 'Difference');
model.component('comp1').selection('dif1').label('holes top and bottom faces');
model.component('comp1').selection('dif1').set('entitydim', 2);
model.component('comp1').selection('dif1').set('add', 'box2');
model.component('comp1').selection('dif1').set('subtract', 'box1');
model.component('comp1').selection.create('box4', 'Box');
model.component('comp1').selection('box4').label('MPP faces');
model.component('comp1').selection('box4').set('entitydim', 2);
model.component('comp1').selection('box4').set('zmin', '-(t + 0.01[mm])');
model.component('comp1').selection('box4').set('zmax', '0.01[mm]');
model.component('comp1').selection('box4').set('condition', 'inside');
model.component('comp1').selection.create('dif2', 'Difference');
model.component('comp1').selection('dif2').label('plate faces');
model.component('comp1').selection('dif2').set('entitydim', 2);
model.component('comp1').selection('dif2').set('add', 'box4');
model.component('comp1').selection('dif2').set('subtract', 'box2');
model.component('comp1').selection.create('box5', 'Box');
model.component('comp1').selection('box5').label('holes edges');
model.component('comp1').selection('box5').set('entitydim', 1);
model.component('comp1').selection('box5').set('xmin', '-Wx/2 + 0.01[mm]');
model.component('comp1').selection('box5').set('ymin', '-Wy/2 + 0.01[mm]');
model.component('comp1').selection('box5').set('zmin', '-(t + 0.01[mm])');
model.component('comp1').selection('box5').set('zmax', '0.01[mm]');
model.component('comp1').selection('box5').set('condition', 'inside');
model.component('comp1').selection.create('box6', 'Box');
model.component('comp1').selection('box6').label('holes side edges');
model.component('comp1').selection('box6').set('entitydim', 1);
model.component('comp1').selection('box6').set('zmin', '-t + 0.01[mm]');
model.component('comp1').selection('box6').set('zmax', '-0.01[mm]');
model.component('comp1').selection('box6').set('condition', 'intersects');
model.component('comp1').selection.create('dif3', 'Difference');
model.component('comp1').selection('dif3').label('holes top and bottom edges');
model.component('comp1').selection('dif3').set('entitydim', 1);
model.component('comp1').selection('dif3').set('add', 'box5');
model.component('comp1').selection('dif3').set('subtract', 'box6');

model.component('comp1').geom('geom1').run('fin');
model.component('comp1').geom('geom1').run;
model.component('comp1').geom('geom1').run('fin');
model.component('comp1').geom('geom1').run('fin');

model.component('comp1').material.create('mat1', 'Common');
model.component('comp1').material('mat1').label('Air');
model.component('comp1').material('mat1').set('family', 'air');
model.component('comp1').material('mat1').materialType('nonSolid');
model.component('comp1').material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.component('comp1').material('mat1').propertyGroup('def').set('molarmass', '');
model.component('comp1').material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.component('comp1').material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.component('comp1').material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.component('comp1').material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.component('comp1').material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.component('comp1').material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.component('comp1').material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.component('comp1').material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.component('comp1').material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.component('comp1').material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.component('comp1').material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.component('comp1').material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.component('comp1').material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.component('comp1').material('mat1').propertyGroup('def').addInput('temperature');
model.component('comp1').material('mat1').propertyGroup('def').addInput('pressure');
model.component('comp1').material('mat1').propertyGroup('def').func.create('eta', 'Piecewise');
model.component('comp1').material('mat1').propertyGroup('def').func('eta').set('arg', 'T');
model.component('comp1').material('mat1').propertyGroup('def').func('eta').set('pieces', {'200.0' '1600.0' '-8.38278E-7+8.35717342E-8*T^1-7.69429583E-11*T^2+4.6437266E-14*T^3-1.06585607E-17*T^4'});
model.component('comp1').material('mat1').propertyGroup('def').func('eta').set('argunit', 'K');
model.component('comp1').material('mat1').propertyGroup('def').func('eta').set('fununit', 'Pa*s');
model.component('comp1').material('mat1').propertyGroup('def').func.create('Cp', 'Piecewise');
model.component('comp1').material('mat1').propertyGroup('def').func('Cp').set('arg', 'T');
model.component('comp1').material('mat1').propertyGroup('def').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.component('comp1').material('mat1').propertyGroup('def').func('Cp').set('argunit', 'K');
model.component('comp1').material('mat1').propertyGroup('def').func('Cp').set('fununit', 'J/(kg*K)');
model.component('comp1').material('mat1').propertyGroup('def').func.create('rho', 'Analytic');
model.component('comp1').material('mat1').propertyGroup('def').func('rho').set('expr', 'pA*0.02897/R_const[K*mol/J]/T');
model.component('comp1').material('mat1').propertyGroup('def').func('rho').set('args', {'pA' 'T'});
model.component('comp1').material('mat1').propertyGroup('def').func('rho').set('fununit', 'kg/m^3');
model.component('comp1').material('mat1').propertyGroup('def').func('rho').set('argunit', {'Pa' 'K'});
model.component('comp1').material('mat1').propertyGroup('def').func('rho').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '293.15'});
model.component('comp1').material('mat1').propertyGroup('def').func.create('k', 'Piecewise');
model.component('comp1').material('mat1').propertyGroup('def').func('k').set('arg', 'T');
model.component('comp1').material('mat1').propertyGroup('def').func('k').set('pieces', {'200.0' '1600.0' '-0.00227583562+1.15480022E-4*T^1-7.90252856E-8*T^2+4.11702505E-11*T^3-7.43864331E-15*T^4'});
model.component('comp1').material('mat1').propertyGroup('def').func('k').set('argunit', 'K');
model.component('comp1').material('mat1').propertyGroup('def').func('k').set('fununit', 'W/(m*K)');
model.component('comp1').material('mat1').propertyGroup('def').func.create('cs', 'Analytic');
model.component('comp1').material('mat1').propertyGroup('def').func('cs').set('expr', 'sqrt(1.4*R_const[K*mol/J]/0.02897*T)');
model.component('comp1').material('mat1').propertyGroup('def').func('cs').set('args', 'T');
model.component('comp1').material('mat1').propertyGroup('def').func('cs').set('fununit', 'm/s');
model.component('comp1').material('mat1').propertyGroup('def').func('cs').set('argunit', 'K');
model.component('comp1').material('mat1').propertyGroup('def').func('cs').set('plotargs', {'T' '273.15' '373.15'});
model.component('comp1').material('mat1').propertyGroup('def').func.create('an1', 'Analytic');
model.component('comp1').material('mat1').propertyGroup('def').func('an1').set('funcname', 'alpha_p');
model.component('comp1').material('mat1').propertyGroup('def').func('an1').set('expr', '-1/rho(pA,T)*d(rho(pA,T),T)');
model.component('comp1').material('mat1').propertyGroup('def').func('an1').set('args', {'pA' 'T'});
model.component('comp1').material('mat1').propertyGroup('def').func('an1').set('fununit', '1/K');
model.component('comp1').material('mat1').propertyGroup('def').func('an1').set('argunit', {'Pa' 'K'});
model.component('comp1').material('mat1').propertyGroup('def').func('an1').set('plotargs', {'pA' '101325' '101325'; 'T' '273.15' '373.15'});
model.component('comp1').material('mat1').propertyGroup('def').func.create('an2', 'Analytic');
model.component('comp1').material('mat1').propertyGroup('def').func('an2').set('funcname', 'muB');
model.component('comp1').material('mat1').propertyGroup('def').func('an2').set('expr', '0.6*eta(T)');
model.component('comp1').material('mat1').propertyGroup('def').func('an2').set('args', 'T');
model.component('comp1').material('mat1').propertyGroup('def').func('an2').set('fununit', 'Pa*s');
model.component('comp1').material('mat1').propertyGroup('def').func('an2').set('argunit', 'K');
model.component('comp1').material('mat1').propertyGroup('def').func('an2').set('plotargs', {'T' '200' '1600'});
model.component('comp1').material('mat1').propertyGroup.create('RefractiveIndex', 'Refractive index');
model.component('comp1').material('mat1').propertyGroup('RefractiveIndex').set('n', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.component('comp1').material('mat1').propertyGroup.create('NonlinearModel', 'Nonlinear model');
model.component('comp1').material('mat1').propertyGroup('NonlinearModel').set('BA', '(def.gamma+1)/2');
model.component('comp1').material('mat1').propertyGroup.create('idealGas', 'Ideal gas');
model.component('comp1').material('mat1').propertyGroup('idealGas').func.create('Cp', 'Piecewise');
model.component('comp1').material('mat1').propertyGroup('idealGas').func('Cp').label('Piecewise 2');
model.component('comp1').material('mat1').propertyGroup('idealGas').func('Cp').set('arg', 'T');
model.component('comp1').material('mat1').propertyGroup('idealGas').func('Cp').set('pieces', {'200.0' '1600.0' '1047.63657-0.372589265*T^1+9.45304214E-4*T^2-6.02409443E-7*T^3+1.2858961E-10*T^4'});
model.component('comp1').material('mat1').propertyGroup('idealGas').func('Cp').set('argunit', 'K');
model.component('comp1').material('mat1').propertyGroup('idealGas').func('Cp').set('fununit', 'J/(kg*K)');
model.component('comp1').material('mat1').propertyGroup('idealGas').set('Rs', 'R_const/Mn');
model.component('comp1').material('mat1').propertyGroup('idealGas').set('heatcapacity', 'Cp(T)');
model.component('comp1').material('mat1').propertyGroup('idealGas').set('ratioofspecificheat', '1.4');
model.component('comp1').material('mat1').propertyGroup('idealGas').set('molarmass', '0.02897');
model.component('comp1').material('mat1').propertyGroup('idealGas').addInput('temperature');
model.component('comp1').material('mat1').propertyGroup('idealGas').addInput('pressure');
model.component('comp1').material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', '');
model.component('comp1').material('mat1').propertyGroup('def').set('molarmass', '');
model.component('comp1').material('mat1').propertyGroup('def').set('bulkviscosity', '');
model.component('comp1').material('mat1').propertyGroup('def').set('thermalexpansioncoefficient', {'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)' '0' '0' '0' 'alpha_p(pA,T)'});
model.component('comp1').material('mat1').propertyGroup('def').set('molarmass', '0.02897[kg/mol]');
model.component('comp1').material('mat1').propertyGroup('def').set('bulkviscosity', 'muB(T)');
model.component('comp1').material('mat1').propertyGroup('def').set('relpermeability', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.component('comp1').material('mat1').propertyGroup('def').set('relpermittivity', {'1' '0' '0' '0' '1' '0' '0' '0' '1'});
model.component('comp1').material('mat1').propertyGroup('def').set('dynamicviscosity', 'eta(T)');
model.component('comp1').material('mat1').propertyGroup('def').set('ratioofspecificheat', '1.4');
model.component('comp1').material('mat1').propertyGroup('def').set('electricconductivity', {'0[S/m]' '0' '0' '0' '0[S/m]' '0' '0' '0' '0[S/m]'});
model.component('comp1').material('mat1').propertyGroup('def').set('heatcapacity', 'Cp(T)');
model.component('comp1').material('mat1').propertyGroup('def').set('density', 'rho(pA,T)');
model.component('comp1').material('mat1').propertyGroup('def').set('thermalconductivity', {'k(T)' '0' '0' '0' 'k(T)' '0' '0' '0' 'k(T)'});
model.component('comp1').material('mat1').propertyGroup('def').set('soundspeed', 'cs(T)');
model.component('comp1').material('mat1').propertyGroup('def').addInput('temperature');
model.component('comp1').material('mat1').propertyGroup('def').addInput('pressure');

model.component('comp1').physics.create('acpr', 'PressureAcoustics', 'geom1');
model.component('comp1').physics('acpr').selection.named('box_tube');
model.component('comp1').physics.create('ta', 'ThermoacousticsSinglePhysics', 'geom1');
model.component('comp1').physics('ta').selection.named('box_mat');
model.component('comp1').physics('acpr').create('pr1', 'Pressure', 2);
model.component('comp1').physics('acpr').feature('pr1').selection.named('box_src');
model.component('comp1').physics('acpr').feature('pr1').set('p0', 1);

model.component('comp1').multiphysics.create('atb1', 'AcousticThermoacousticBoundary', 2);
model.component('comp1').multiphysics('atb1').selection.named('box_bnd_tva');

model.component('comp1').mesh.create('mesh1');
model.component('comp1').mesh('mesh1').feature('size').set('hauto', 8);
model.component('comp1').mesh('mesh1').create('ftet1', 'FreeTet');
model.component('comp1').mesh('mesh1').feature('ftet1').label('Maillage tetraedrique du tube');
model.component('comp1').mesh('mesh1').feature('ftet1').selection.named('box_tube');
model.component('comp1').mesh('mesh1').create('bl1', 'BndLayer');
model.component('comp1').mesh('mesh1').feature('bl1').label('Maillage annulaire dans les perforations');
model.component('comp1').mesh('mesh1').feature('bl1').selection.named('box3');
model.component('comp1').mesh('mesh1').feature('bl1').create('blp', 'BndLayerProp');
model.component('comp1').mesh('mesh1').feature('bl1').feature('blp').selection.named('box1');
model.component('comp1').mesh('mesh1').feature('bl1').feature('blp').set('blnlayers', 4);
model.component('comp1').mesh('mesh1').feature('bl1').feature('blp').set('blhtot', '0.0005');
model.component('comp1').mesh('mesh1').create('bl6', 'BndLayer');
model.component('comp1').mesh('mesh1').feature('bl6').label('Maillage longitudinale dans les perforations');
model.component('comp1').mesh('mesh1').feature('bl6').selection.named('box3');
model.component('comp1').mesh('mesh1').feature('bl6').create('blp', 'BndLayerProp');
model.component('comp1').mesh('mesh1').feature('bl6').feature('blp').selection.named('dif1');
model.component('comp1').mesh('mesh1').feature('bl6').feature('blp').set('blnlayers', 2);
model.component('comp1').mesh('mesh1').feature('bl6').feature('blp').set('blhtot', '1[mm]');
model.component('comp1').mesh('mesh1').create('bl3', 'BndLayer');
model.component('comp1').mesh('mesh1').feature('bl3').label('Mailllage annulaire autour des perforations');
model.component('comp1').mesh('mesh1').feature('bl3').selection.geom('geom1', 2);
model.component('comp1').mesh('mesh1').feature('bl3').selection.named('dif2');
model.component('comp1').mesh('mesh1').feature('bl3').create('blp', 'BndLayerProp');
model.component('comp1').mesh('mesh1').feature('bl3').feature('blp').selection.named('dif3');
model.component('comp1').mesh('mesh1').feature('bl3').feature('blp').set('blnlayers', 4);
model.component('comp1').mesh('mesh1').feature('bl3').feature('blp').set('blhtot', '0.0005');
model.component('comp1').mesh('mesh1').create('ftet2', 'FreeTet');
model.component('comp1').mesh('mesh1').feature('ftet2').label('Maillage tetraedrique du materiau');
model.component('comp1').mesh('mesh1').feature('ftet2').selection.set([1 2]);
model.component('comp1').mesh('mesh1').run;
model.component('comp1').mesh('mesh1').data.transferMesh;

model.study.create('std1');
model.study('std1').create('freq', 'Frequency');
model.study('std1').feature('freq').set('plist', '1      26.120603      51.241206      76.361809      101.48241      126.60302      151.72362      176.84422      201.96482      227.08543      252.20603      277.32663      302.44724      327.56784      352.68844      377.80905      402.92965      428.05025      453.17085      478.29146      503.41206      528.53266      553.65327      578.77387      603.89447      629.01508      654.13568      679.25628      704.37688      729.49749      754.61809      779.73869       804.8593       829.9799       855.1005      880.22111      905.34171      930.46231      955.58291      980.70352      1005.8241      1030.9447      1056.0653      1081.1859      1106.3065      1131.4271      1156.5477      1181.6683      1206.7889      1231.9095      1257.0302      1282.1508      1307.2714       1332.392      1357.5126      1382.6332      1407.7538      1432.8744       1457.995      1483.1156      1508.2362      1533.3568      1558.4774       1583.598      1608.7186      1633.8392      1658.9598      1684.0804       1709.201      1734.3216      1759.4422      1784.5628      1809.6834       1834.804      1859.9246      1885.0452      1910.1658      1935.2864       1960.407      1985.5276      2010.6482      2035.7688      2060.8894      2086.0101      2111.1307      2136.2513      2161.3719      2186.4925      2211.6131      2236.7337      2261.8543      2286.9749      2312.0955      2337.2161      2362.3367      2387.4573      2412.5779      2437.6985      2462.8191      2487.9397      2513.0603      2538.1809      2563.3015      2588.4221      2613.5427      2638.6633      2663.7839      2688.9045      2714.0251      2739.1457      2764.2663      2789.3869      2814.5075      2839.6281      2864.7487      2889.8693      2914.9899      2940.1106      2965.2312      2990.3518      3015.4724       3040.593      3065.7136      3090.8342      3115.9548      3141.0754       3166.196      3191.3166      3216.4372      3241.5578      3266.6784       3291.799      3316.9196      3342.0402      3367.1608      3392.2814       3417.402      3442.5226      3467.6432      3492.7638      3517.8844       3543.005      3568.1256      3593.2462      3618.3668      3643.4874       3668.608      3693.7286      3718.8492      3743.9698      3769.0905      3794.2111      3819.3317      3844.4523      3869.5729      3894.6935      3919.8141      3944.9347      3970.0553      3995.1759      4020.2965      4045.4171      4070.5377      4095.6583      4120.7789      4145.8995      4171.0201      4196.1407      4221.2613      4246.3819      4271.5025      4296.6231      4321.7437      4346.8643      4371.9849      4397.1055      4422.2261      4447.3467      4472.4673      4497.5879      4522.7085      4547.8291      4572.9497      4598.0704       4623.191      4648.3116      4673.4322      4698.5528      4723.6734       4748.794      4773.9146      4799.0352      4824.1558      4849.2764       4874.397      4899.5176      4924.6382      4949.7588      4974.8794           5000');

model.sol.create('sol1');
model.sol('sol1').study('std1');
model.sol('sol1').attach('std1');
model.sol('sol1').create('st1', 'StudyStep');
model.sol('sol1').feature('st1').label('Compile Equations: Frequency Domain');
model.sol('sol1').create('v1', 'Variables');
model.sol('sol1').feature('v1').label('Dependent Variables 1.1');
model.sol('sol1').feature('v1').set('clistctrl', 'p1');
model.sol('sol1').feature('v1').set('cname', 'freq');
model.sol('sol1').feature('v1').set('clist', '1[Hz] 26.120603[Hz] 51.241206[Hz] 76.361809[Hz] 101.48241[Hz] 126.60302[Hz] 151.72362[Hz] 176.84422[Hz] 201.96482[Hz] 227.08543[Hz] 252.20603[Hz] 277.32663[Hz] 302.44724[Hz] 327.56784[Hz] 352.68844[Hz] 377.80905[Hz] 402.92965[Hz] 428.05025[Hz] 453.17085[Hz] 478.29146[Hz] 503.41206[Hz] 528.53266[Hz] 553.65327[Hz] 578.77387[Hz] 603.89447[Hz] 629.01508[Hz] 654.13568[Hz] 679.25628[Hz] 704.37688[Hz] 729.49749[Hz] 754.61809[Hz] 779.73869[Hz] 804.8593[Hz] 829.9799[Hz] 855.1005[Hz] 880.22111[Hz] 905.34171[Hz] 930.46231[Hz] 955.58291[Hz] 980.70352[Hz] 1005.8241[Hz] 1030.9447[Hz] 1056.0653[Hz] 1081.1859[Hz] 1106.3065[Hz] 1131.4271[Hz] 1156.5477[Hz] 1181.6683[Hz] 1206.7889[Hz] 1231.9095[Hz] 1257.0302[Hz] 1282.1508[Hz] 1307.2714[Hz] 1332.392[Hz] 1357.5126[Hz] 1382.6332[Hz] 1407.7538[Hz] 1432.8744[Hz] 1457.995[Hz] 1483.1156[Hz] 1508.2362[Hz] 1533.3568[Hz] 1558.4774[Hz] 1583.598[Hz] 1608.7186[Hz] 1633.8392[Hz] 1658.9598[Hz] 1684.0804[Hz] 1709.201[Hz] 1734.3216[Hz] 1759.4422[Hz] 1784.5628[Hz] 1809.6834[Hz] 1834.804[Hz] 1859.9246[Hz] 1885.0452[Hz] 1910.1658[Hz] 1935.2864[Hz] 1960.407[Hz] 1985.5276[Hz] 2010.6482[Hz] 2035.7688[Hz] 2060.8894[Hz] 2086.0101[Hz] 2111.1307[Hz] 2136.2513[Hz] 2161.3719[Hz] 2186.4925[Hz] 2211.6131[Hz] 2236.7337[Hz] 2261.8543[Hz] 2286.9749[Hz] 2312.0955[Hz] 2337.2161[Hz] 2362.3367[Hz] 2387.4573[Hz] 2412.5779[Hz] 2437.6985[Hz] 2462.8191[Hz] 2487.9397[Hz] 2513.0603[Hz] 2538.1809[Hz] 2563.3015[Hz] 2588.4221[Hz] 2613.5427[Hz] 2638.6633[Hz] 2663.7839[Hz] 2688.9045[Hz] 2714.0251[Hz] 2739.1457[Hz] 2764.2663[Hz] 2789.3869[Hz] 2814.5075[Hz] 2839.6281[Hz] 2864.7487[Hz] 2889.8693[Hz] 2914.9899[Hz] 2940.1106[Hz] 2965.2312[Hz] 2990.3518[Hz] 3015.4724[Hz] 3040.593[Hz] 3065.7136[Hz] 3090.8342[Hz] 3115.9548[Hz] 3141.0754[Hz] 3166.196[Hz] 3191.3166[Hz] 3216.4372[Hz] 3241.5578[Hz] 3266.6784[Hz] 3291.799[Hz] 3316.9196[Hz] 3342.0402[Hz] 3367.1608[Hz] 3392.2814[Hz] 3417.402[Hz] 3442.5226[Hz] 3467.6432[Hz] 3492.7638[Hz] 3517.8844[Hz] 3543.005[Hz] 3568.1256[Hz] 3593.2462[Hz] 3618.3668[Hz] 3643.4874[Hz] 3668.608[Hz] 3693.7286[Hz] 3718.8492[Hz] 3743.9698[Hz] 3769.0905[Hz] 3794.2111[Hz] 3819.3317[Hz] 3844.4523[Hz] 3869.5729[Hz] 3894.6935[Hz] 3919.8141[Hz] 3944.9347[Hz] 3970.0553[Hz] 3995.1759[Hz] 4020.2965[Hz] 4045.4171[Hz] 4070.5377[Hz] 4095.6583[Hz] 4120.7789[Hz] 4145.8995[Hz] 4171.0201[Hz] 4196.1407[Hz] 4221.2613[Hz] 4246.3819[Hz] 4271.5025[Hz] 4296.6231[Hz] 4321.7437[Hz] 4346.8643[Hz] 4371.9849[Hz] 4397.1055[Hz] 4422.2261[Hz] 4447.3467[Hz] 4472.4673[Hz] 4497.5879[Hz] 4522.7085[Hz] 4547.8291[Hz] 4572.9497[Hz] 4598.0704[Hz] 4623.191[Hz] 4648.3116[Hz] 4673.4322[Hz] 4698.5528[Hz] 4723.6734[Hz] 4748.794[Hz] 4773.9146[Hz] 4799.0352[Hz] 4824.1558[Hz] 4849.2764[Hz] 4874.397[Hz] 4899.5176[Hz] 4924.6382[Hz] 4949.7588[Hz] 4974.8794[Hz] 5000[Hz]');
model.sol('sol1').create('s1', 'Stationary');
model.sol('sol1').feature('s1').create('fc1', 'FullyCoupled');
model.sol('sol1').feature('s1').feature.remove('fcDef');
model.sol('sol1').feature('s1').label('Stationary Solver 1.1');
model.sol('sol1').feature('s1').feature('dDef').label('Direct 2');
model.sol('sol1').feature('s1').feature('aDef').label('Advanced 1');
model.sol('sol1').feature('s1').feature('aDef').set('complexfun', true);
model.sol('sol1').feature('s1').feature('fc1').label('Fully Coupled 1.1');
model.sol('sol1').feature('s1').create('p1', 'Parametric');
model.sol('sol1').feature('s1').feature('p1').label('Parametric 1.1');
model.sol('sol1').feature('s1').feature('p1').set('pname', 'freq');
model.sol('sol1').feature('s1').feature('p1').set('plistarr', '1      26.120603      51.241206      76.361809      101.48241      126.60302      151.72362      176.84422      201.96482      227.08543      252.20603      277.32663      302.44724      327.56784      352.68844      377.80905      402.92965      428.05025      453.17085      478.29146      503.41206      528.53266      553.65327      578.77387      603.89447      629.01508      654.13568      679.25628      704.37688      729.49749      754.61809      779.73869       804.8593       829.9799       855.1005      880.22111      905.34171      930.46231      955.58291      980.70352      1005.8241      1030.9447      1056.0653      1081.1859      1106.3065      1131.4271      1156.5477      1181.6683      1206.7889      1231.9095      1257.0302      1282.1508      1307.2714       1332.392      1357.5126      1382.6332      1407.7538      1432.8744       1457.995      1483.1156      1508.2362      1533.3568      1558.4774       1583.598      1608.7186      1633.8392      1658.9598      1684.0804       1709.201      1734.3216      1759.4422      1784.5628      1809.6834       1834.804      1859.9246      1885.0452      1910.1658      1935.2864       1960.407      1985.5276      2010.6482      2035.7688      2060.8894      2086.0101      2111.1307      2136.2513      2161.3719      2186.4925      2211.6131      2236.7337      2261.8543      2286.9749      2312.0955      2337.2161      2362.3367      2387.4573      2412.5779      2437.6985      2462.8191      2487.9397      2513.0603      2538.1809      2563.3015      2588.4221      2613.5427      2638.6633      2663.7839      2688.9045      2714.0251      2739.1457      2764.2663      2789.3869      2814.5075      2839.6281      2864.7487      2889.8693      2914.9899      2940.1106      2965.2312      2990.3518      3015.4724       3040.593      3065.7136      3090.8342      3115.9548      3141.0754       3166.196      3191.3166      3216.4372      3241.5578      3266.6784       3291.799      3316.9196      3342.0402      3367.1608      3392.2814       3417.402      3442.5226      3467.6432      3492.7638      3517.8844       3543.005      3568.1256      3593.2462      3618.3668      3643.4874       3668.608      3693.7286      3718.8492      3743.9698      3769.0905      3794.2111      3819.3317      3844.4523      3869.5729      3894.6935      3919.8141      3944.9347      3970.0553      3995.1759      4020.2965      4045.4171      4070.5377      4095.6583      4120.7789      4145.8995      4171.0201      4196.1407      4221.2613      4246.3819      4271.5025      4296.6231      4321.7437      4346.8643      4371.9849      4397.1055      4422.2261      4447.3467      4472.4673      4497.5879      4522.7085      4547.8291      4572.9497      4598.0704       4623.191      4648.3116      4673.4322      4698.5528      4723.6734       4748.794      4773.9146      4799.0352      4824.1558      4849.2764       4874.397      4899.5176      4924.6382      4949.7588      4974.8794           5000');
model.sol('sol1').feature('s1').feature('p1').set('punit', 'Hz');
model.sol('sol1').feature('s1').feature('p1').set('pcontinuationmode', 'no');
model.sol('sol1').feature('s1').feature('p1').set('preusesol', 'auto');
model.sol('sol1').feature('s1').create('d1', 'Direct');
model.sol('sol1').feature('s1').feature('d1').label('Direct 1.1');
model.sol('sol1').feature('s1').feature('d1').set('linsolver', 'pardiso');
model.sol('sol1').feature('s1').feature('d1').set('pivotperturb', 1.0E-13);
model.sol('sol1').runAll;

model.result.numerical.create('av1', 'AvLine');

model.label(['mod' native2unicode(hex2dec({'00' 'e8'}), 'unicode') 'le3D.mph']);

model.result.numerical.create('av2', 'AvSurface');
model.result.numerical('av2').set('intvolume', true);

out = model;
