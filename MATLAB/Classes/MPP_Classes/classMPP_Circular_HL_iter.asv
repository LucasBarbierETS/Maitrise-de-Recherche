classdef classMPP_Circular_HL_iter < classMPP_Circular

% Description
% Ce constructeur de classe permet de créer une plaque microperforée à perforations circulaires
% Il se base sur le modèle de fluide équivalent (JCA) développé dans 'classJCA_Rigid'
% En plus de cela, on intègre la résistivité et la tortuosité modifiée développée par Laly dans [5]
% obtenue suivant une procédure itérative

% References
%            [1] Atalla, Noureddine, et Franck Sgard. « Modeling of Perforated 
%                Plates and Screens Using Rigid Frame Porous Models ». Journal 
%                of Sound and Vibration, vol. 303, no 1‑2, juin 2007, p. 195‑208.
%                DOI.org (Crossref), https://doi.org/10.1016/j.jsv.2007.01.012.
% 
%            [2] Ingard, Uno. « On the Theory and Design of Acoustic Resonators ». 
%                The Journal of the Acoustical Society of America, vol. 25, no 6, 
%                juin 2005, p. 1037. world, asa.scitation.org, 
%                https://doi.org/10.1121/1.1907235.
% 
%            [3] Okuzono, Takeshi, et al. "Note on Microperforated Panel Model Using
%                Equivalent-Fluid-Based Absorption Elements." Acoustical Science and 
%                Technology, vol. 40, no. 3, May 2019, pp. 221–24. DOI.org (Crossref), 
%                https://doi.org/10.1250/ast.40.221.)
%
%            [4] Stinson & Champoux, Propagation of sound and the assignment of 
%                shape factors in model porous materials having simple pore geometries
%                http://asa.scitation.org/doi/10.1121/1.402530
%
%            [5] Zacharie Laly, Acoustical modeling of micro-perforated panel at high 
%                sound pressure levels using equivalent fluid approach
%                https://linkinghub.elsevier.com/retrieve/pii/S0022460X17306740
%
%            [6] Zacharie Laly, Développement, validation expérimentale et optimisation 
%                des traitements acoustiques des nacelles de turboréacteurs sous hauts 
%                niveaux acoustiques
         
%% Constructeur de classe

    methods

        function obj = classMPP_Circular_HL_iter(config, varargin)
            
            p = inputParser;
            addRequired(p, 'Va', 0, @isscalar)
            parse(p, obj, env, varargin{:});
            Va = p.Results.Va;
            
            phi = config.PlatePorosity;
            pr = config.PerforationsRadius;
            t = config.PlateThickness;        
            
            obj.Configuration.AirFlowResistivity = @(env) classMPP_Circular_HL_iter.air_flow_resistivity(env, Va, phi, pr, t);
            obj.Configuration.Toruosity = @(env) classMPP_Circular_HL_iter.tortuosity(env, Va, phi, pr, t);
        end

        function surface_impedance(obj, env, varargin)

            p = inputParser;
            addRequired(p, 'Va', 0, @isscalar)
            parse(p, obj, env, varargin{:});
            Va = p.Results.Va;

            % dB2RMS = @(dB) env.p_ref * 10^(dB/20);
            RMS2dB = @(p) 20 * log10(p/ env.p_ref);
            
            phi = config.PlatePorosity;
            pr = config.PerforationsRadius;
            t = config.PlateThickness;

            % Paramètres de convergence
            tol = 1e-6;  % Tolérance pour la convergence
            max_iter = 100;  % Nombre maximum d'itérations
            iter = 0;
            converged = false;
            
             while ~converged && iter < max_iter
                iter = iter + 1;

                % Calcul de l'impédance de surface avec la vitesse courante
                % en appelant la méthode définit dans la classe parente
                Z_s = abs(classMPP_Circular.surface_impedance(obj, env));
        
                % Mise à jour de la vitesse acoustique
                Va_new = env.p_ref * 10^(RMS2dB(env.p) / 20) / (env.air.parameters.Z0 * Z_s);
        
                % Vérification du critère de convergence
                error_rel = abs(Va_new - Va_old) / abs(Va_old);
                if error_rel < tol
                    converged = true;
                else
                    Va_old = Va_new;
                end
            end
        end
    end

    methods (Static, Access = public)

        function sig = air_flow_resistivity(env, Va, phi, pr, t)

            beta = 1.6; % [5] p.8
            Cd = 0.76; % [5] p.8

            % Résistivité au passage de l'air ([5], p. 7, eq. 20)
            sig = 8 * env.air.parameters.eta / (phi * pr^2) ... 
                + beta * env.air.parameters.rho * (1 - phi^2) / (pi * t * phi * Cd^2) * Va;
        end

        function tor = tortuosity(env, Va, phi, pr, t)
             
            psi = 4/3; 
            a = [1.0 -1.4092 0.0 0.33818 0.0 0.06793 -0.02287 0.003015 -0.01614];
            sum_a = dot(a, sqrt(phi).^(0:length(a)-1));

            % Tortuosité non linéaire ([5], p. 7, eq. 22, 23)
            tor = 1 + 2 * psi / (t * (1 + Va / (phi * env.c0))) ...
            * 0.48 * sqrt(pi * pr^2) * sum_a;
        end

        function validate()

            figure();

            % création de l'environnement
            % env = create_environnement(23, 100800, 22, 1, 5000, 200);

            s =  1; % section arbitraire des solutions

            Pref = 20e-6;
            db2rms = @(dB) Pref * 10^(dB/20);

            % %% Résistivité au passage de l'air (Laly2017)
            % % Données de référence : [6], fig. 3.29, p. 68
            % 
            % subplot(2, 3, 1)
            % hold on            
            % 
            % % importation des données de références
            % data = csvread('Laly2017_fig3.29.txt');
            % [x_data, y_data] = interpole_et_lisse(data(:, 1), data(:, 2), 1000, 0.05);
            % plot(x_data, y_data, 'g--', 'DisplayName', 'Données de référence');
            % 
            % % création de l'environnement
            % env = create_environnement(23, 100800, 22, 1, 6000, 200);
            % 
            % % Paramètres de la configuration
            % dB = 50:5:160; % niveau de pression
            % sig_HL = zeros(1, length(dB));
            % t = 1.2e-3; % épaisseur de la plaque
            % d = 0.8e-3; % diamètre des perforations
            % phi = 0.018; % porosité de la plaque
            % config_HL = classMPP_Circular_HL.create_config(phi, t, d/2, 1);
            % MPP_HL = classMPP_Circular_HL(config_HL);
            % 
            % for i = 1:length(dB)
            %     env.p = db2rms(dB(i));
            %     sig_HL(i) = MPP_HL.Configuration.JCAParameters.AirFlowResistivity(env);
            % end
            % 
            % % affichage des résultats
            % plot(dB, sig_HL, 'r--o', 'DisplayName', 'Modèle non linéaire');
            % xlabel("Niveau de pression SPL (dB)")
            % ylabel("Résistivité (Pa.s/m)")
            % xlim([50 160])
            % subtitle('Résistivité au passage de l''air - fig. 3.29, p. 68')
            % legend()

            % %% Tortuosité (Laly2017)
            % % Données de référence : [6], fig. 3.28, p. 67
            % 
            % subplot(2, 3, 2)
            % hold on
            % 
            % % Paramètres de la configuration
            % dB = 50:5:150; % niveau de pression
            % phi = 0:0.005:0.10;
            % tor_HL = zeros(length(phi), length(dB));
            % t = 1.0e-3; % épaisseur de la plaque
            % d = 0.8e-3; % diamètre des perforations
            % 
            % for i = 1:length(phi)
            %     config_HL = classMPP_Circular_HL.create_config(phi(i), t, d/2, s); 
            %     MPP_HL = classMPP_Circular_HL(config_HL);
            %     for j = 1:length(dB)               
            %         env.p = db2rms(dB(j));
            %         tor_HL(i, j) = MPP_HL.Configuration.JCAParameters.Tortuosity(env);               
            %     end
            % end
            % 
            % % affichage des résultats
            % contourf(dB, phi*100, tor_HL);
            % colorbar;
            % colormap(jet);
            % % clim([1 1.8]);
            % xlabel("Niveau de pression SPL (dB)")
            % ylabel("Porosité (ad)")
            % ylim([0.5 10])
            % xlim([50 150])           
            % subtitle('Tortuosité - fig. 3.28, p. 67')

            % %% multiMPP + Cavité à différents niveaux de pression (Laly2017)
            % % Données de référence : [6], fig. 7.12, p. 189
            % path = 'C:\Users\lucas.barbier\OneDrive - ETS\CRIAQ-REAR\Maitrise LB\MATLAB\Classes\MPP_Classes\Validation\Laly2017\fig 7.12\';
            % 
            % subplot(2, 3, 4)
            % hold on
            % 
            % % Paramètres de la configuration
            % nb = 2; % Nombre de MPP
            % dB = [100 130 150]; % niveau de pression
            % t = [1e-3 1e-3]; % épaisseur de la plaque
            % d = [1.45e-3 1.45e-3 1.35e-3]; % diamètre des perforations
            % D = 32e-3; % épaisseur de la cavité arrière
            % phi = [0.083 0.078 0.049]; % porosité de la plaque
            % 
            % % création de l'environnement
            % env = create_environnement(23, 100800, 22, 1, 5000, 200);
            % 
            % % création de l'élement
            % list = {};
            % for i = 1:nb
            %     config = classMPP_Circular_HL.create_config(phi(i), t(i), d(i)/2, s);   
            %     list{end+1} = classMPP_Circular_HL(config);
            %     list{end+1} = classcavity(classcavity.create_config(D, s));    
            % end
            % 
            % E_HL = classelement(classelement.create_config(list, 'closed', s));
            % 
            % for i = 1:length(dB)
            %     env.p = db2rms(dB(i));
            %     alpha_model_HL = E_HL.alpha(env);
            %     color = rand(1, 3);
            % 
            %     % importation des données de références
            %     data = import_plot([path, num2str(dB(i)), 'dB.txt']);
            %     [x_data, y_data] = interpole_et_lisse(data(:, 1), data(:, 2), 1000, 0.05);
            %     plot(x_data, y_data, 'Color', color, 'Linestyle', '--', 'DisplayName', ['Référence : SPL = ', num2str(dB(i)), ' dB']);
            %     plot(env.w/(2*pi), alpha_model_HL, 'Color', color, 'DisplayName', ['SPL = ', num2str(dB(i)), 'dB'], 'LineWidth', 1.5);
            % end
            % 
            % % affichage des résultats
            % xlabel("Fréquence (Hz)")
            % ylabel("Coefficient d'Absorption")
            % ylim([0,1])
            % xlim([500 5000])
            % subtitle("multi MPP + Cavité - fig. 7.12, p. 188")
            % 
            % % plot(x_data, y_data, 'Color', 'g','LineWidth', 1, 'LineStyle', '--');
            % legend()

            %% MPP + Cavité à différents niveaux de pression (Laly2017)
            % Données de référence : [6], fig. 7.11, p. 188
            path = 'C:\Users\lucas.barbier\OneDrive - ETS\CRIAQ-REAR\Maitrise LB\MATLAB\Classes\MPP_Classes\Validation\Laly2017\fig. 7.11\';

            subplot(2, 3, 3)
            hold on

            % Paramètres de la configuration
            dB = [100 130 150]; % niveau de pression
            t = 1e-3; % épaisseur de la plaque
            d = 1.35e-3; % diamètre des perforations
            D = 32e-3; % épaisseur de la cavité arrière
            phi = 0.0672; % porosité de la plaque
            config = classMPP_Circular_HL_iter.create_config(phi, t, d/2, s);   
            % config = classMPP_Circular.create_config(phi, t, d/2, s);
            MPP_HL = classMPP_Circular_HL_iter(config);


            % création de l'environnement
            env = create_environnement(23, 100800, 22, 1, 5000, 200);

            % création de l'élement composé d'une plaque et d'une cavité
            Cav = classcavity(classcavity.create_config(D, s));
            E_HL = classelement(classelement.create_config({MPP_HL, Cav}, 'closed', s));

            for i = 1:length(dB)
                env.p = db2rms(dB(i));
                alpha_model_HL = E_HL.alpha(env);
                color = rand(1, 3);

                % importation des données de références
                data = csvread([path, num2str(dB(i)), 'dB.txt']);
                [x_data, y_data] = interpole_et_lisse(data(:, 1), data(:, 2), 1000, 0.05);
                plot(x_data, y_data, 'Color', color, 'Linestyle', '--', 'DisplayName', ['Référence : SPL = ', num2str(dB(i)), ' dB']);
                plot(env.w/(2*pi), alpha_model_HL, 'Color', color, 'DisplayName', ['SPL = ', num2str(dB(i)), 'dB'], 'LineWidth', 1.5);
            end

            % affichage des résultats
            xlabel("Fréquence (Hz)")
            ylabel("Coefficient d'Absorption")
            ylim([0,1])
            xlim([0 5000])
            subtitle("MPP + Cavité - 7.11, p. 188")

            legend()

            %% MPP + Cavité (Laly2017)
            % Données de référence : [6], fig. 3.5, p. 52

            path = 'C:\Users\lucas.barbier\OneDrive - ETS\CRIAQ-REAR\Maitrise LB\MATLAB\Classes\MPP_Classes\Validation\Laly2017\fig. 3.5\';

            subplot(2, 3, 3)
            hold on

            % Paramètres de la configuration
            dB = 143; % niveau de pression
            t = 0.8e-3; % épaisseur de la plaque
            d = 1.2e-3; % diamètre des perforations
            D = 28e-3; % épaisseur de la cavité arrière
            phi = 0.0523; % porosité de la plaque  
            config = classMPP_Circular.create_config(phi, t, d/2, s);
            MPP = classMPP_Circular(config);
            config_HL = classMPP_Circular_HL_iter.create_config(phi, t, d/2, s);
            MPP_HL = classMPP_Circular_HL_iter(config_HL);

            % création de l'élement composé d'une plaque et d'une cavité
            Cav = classcavity(classcavity.create_config(D, s));
            E = classelement(classelement.create_config({MPP, Cav}, 'closed', s));
            E_HL = classelement(classelement.create_config({MPP_HL, Cav}, 'closed', s));

            plot(env.w/(2*pi), E.alpha(env), 'LineStyle', ':', 'DisplayName', 'Modèle linéaire', 'LineWidth', 1.5);

            for i = 1:length(dB)
                env.p = db2rms(dB(i));
                alpha_model_HL = E_HL.alpha(env);
                color = rand(1, 3);

                % importation des données de références
                data = import_plot([path, num2str(dB(i)), 'dB.txt']);
                [x_data, y_data] = interpole_et_lisse(data(:, 1), data(:, 2), 30, 0.05);
                plot(x_data, y_data, 'Color', color, 'Linestyle', '--','Marker', 'o', 'DisplayName', ['Référence : SPL = ', num2str(dB(i)), ' dB']);
                plot(env.w/(2*pi), alpha_model_HL, 'Color', color, 'DisplayName', ['SPL = ', num2str(dB(i)), 'dB'], 'LineWidth', 1.5);
            end

            % affichage des résultats
            xlabel("Fréquence (Hz)")
            ylabel("Coefficient d'Absorption")
            ylim([0 1])
            xlim([0 4000])
            subtitle("MPP + Cavité - 3.5, p. 52")

            legend()
            
            %% MPP + Cavité à différents niveaux de pression (Laly2017)
            % Données de référence : [6], fig. 3.11, p. 56

            path = 'C:\Users\lucas.barbier\OneDrive - ETS\CRIAQ-REAR\Maitrise LB\MATLAB\Classes\MPP_Classes\Validation\Laly2017\fig. 3.11\';

            subplot(2, 3, 4)
            hold on

            % Paramètres de la configuration
            dB = [125 150]; % niveau de pression
            t = 0.86e-3; % épaisseur de la plaque
            d = 1.517e-3; % diamètre des perforations
            D = 25e-3; % épaisseur de la cavité arrière
            phi = 0.0523; % porosité de la plaque  
            config = classMPP_Circular_HL_iter.create_config(phi, t, d/2, s);
            MPP_HL = classMPP_Circular_HL_iter(config);

            % création de l'élement composé d'une plaque et d'une cavité
            Cav = classcavity(classcavity.create_config(D, s));

            E_HL = classelement(classelement.create_config({MPP_HL, Cav}, 'closed', s));

            plot(env.w/(2*pi), E.alpha(env), 'LineStyle', ':', 'DisplayName', 'Modèle linéaire', 'LineWidth', 1.5);

            for i = 1:length(dB)
                env.p = db2rms(dB(i));
                alpha_model_HL = E_HL.alpha(env);
                color = rand(1, 3);

                % importation des données de références
                data = import_plot([path, num2str(dB(i)), 'dB.txt']);
                [x_data, y_data] = interpole_et_lisse(data(:, 1), data(:, 2), 1000, 0.05);
                plot(x_data, y_data, 'Color', color, 'Linestyle', '--', 'DisplayName', ['Référence : SPL = ', num2str(dB(i)), ' dB']);
                plot(env.w/(2*pi), alpha_model_HL, 'Color', color, 'DisplayName', ['SPL = ', num2str(dB(i)), 'dB'], 'LineWidth', 1.5);
            end

            % affichage des résultats
            xlabel("Fréquence (Hz)")
            ylabel("Coefficient d'Absorption")
            ylim([0,1])
            xlim([500 6000])
            subtitle("MPP + Cavité - 3.11, p. 56")

            legend()

            %% Double MPP + Cavité (Laly2017)
            % Données de référence : [6], fig. 3.16, p. 58

            path = 'C:\Users\lucas.barbier\OneDrive - ETS\CRIAQ-REAR\Maitrise LB\MATLAB\Classes\MPP_Classes\Validation\Laly2017\fig. 3.16\';

            subplot(2, 3, 5)
            hold on

            % Paramètres de la configuration
            dB = 145; % niveau de pression
            t = [1 1] * 1e-3; % épaisseur de la plaque
            d = [1.4 1.33] * 1e-3; % diamètre des perforations
            D = [30 30] * 1e-3; % épaisseur de la cavité arrière
            phi = [6.28 4.65] * 1e-2; % porosité de la plaque  

            % création de l'élement
            list = {};
            list_HL = {};
            for i = 1:length(t)
                config = classMPP_Circular.create_config(phi(i), t(i), d(i)/2, s);  
                config_HL = classMPP_Circular_HL_iter.create_config(phi(i), t(i), d(i)/2, s);
                list{end+1} = classMPP_Circular(config);
                list_HL{end+1} = classMPP_Circular_HL_iter(config_HL);
                list{end+1} = classcavity(classcavity.create_config(D(i), s)); 
                list_HL{end+1} = classcavity(classcavity.create_config(D(i), s));
            end

            E = classelement(classelement.create_config(list, 'closed', s));
            E_HL = classelement(classelement.create_config(list_HL, 'closed', s));

            plot(env.w/(2*pi), E.alpha(env), 'LineStyle', ':', 'DisplayName', 'Modèle linéaire', 'LineWidth', 1.5);

            for j = 1:length(dB)
                env.p = db2rms(dB(j));
                alpha_model_HL = E_HL.alpha(env);
                color = rand(1, 3);

                % importation des données de références
                data = import_plot([path, num2str(dB(j)), 'dB.txt']);
                [x_data, y_data] = interpole_et_lisse(data(:, 1), data(:, 2), 1000, 0.05);
                plot(x_data, y_data, 'Color', color, 'Linestyle', '--', 'DisplayName', ['Référence : SPL = ', num2str(dB(j)), ' dB']);
                plot(env.w/(2*pi), alpha_model_HL, 'Color', color, 'DisplayName', ['SPL = ', num2str(dB(j)), 'dB'], 'LineWidth', 1.5);
            end

            % affichage des résultats
            xlabel("Fréquence (Hz)")
            ylabel("Coefficient d'Absorption")
            ylim([0.1 1])
            xlim([500 5000])
            subtitle("MPP + Cavité - 3.16, p. 58")

            legend()
        end
    end
end