classdef classMPP_Circular < classJCA_Rigid

%% References:

%            [1] Atalla, Noureddine, et Franck Sgard. « Modeling of Perforated 
%                Plates and Screens Using Rigid Frame Porous Models ». Journal 
%                of Sound and Vibration, vol. 303, no 1‑2, juin 2007, p. 195‑208.
%                DOI.org (Crossref), https://doi.org/10.1016/j.jsv.2007.01.012.
% 
%            [2] Ingard, Uno. « On the Theory and Design of Acoustic Resonators ». 
%                The Journal of the Acoustical Society of America, vol. 25, no 6, 
%                juin 2005, p. 1037. world, asa.scitation.org, 
%                https://doi.org/10.1121/1.1907235.
% 
%            [3] Okuzono, Takeshi, et al. "Note on Microperforated Panel Model Using
%                Equivalent-Fluid-Based Absorption Elements." Acoustical Science and 
%                Technology, vol. 40, no. 3, May 2019, pp. 221–24. DOI.org (Crossref), 
%                https://doi.org/10.1250/ast.40.221.)
%
%            [4] Stinson & Champoux, Propagation of sound and the assignment of 
%                shape factors in model porous materials having simple pore geometries
%                http://asa.scitation.org/doi/10.1121/1.402530

%% Description

% Ce constructeur de classe permet de créer une plaque microperforée à perforations circulaires
% Il se base sur le modèle de fluide équivalent (JCA) développé dans 'classJCA_Rigid'

                 
%% Constructeur de classe

    methods

        function obj = classMPP_Circular(config)

            phi = config.PlatePorosity;
            pr = config.PerforationsRadius;
            t = config.PlateThickness;
            s = config.PlateSection;

            % Si aucune correction de longueur n'est donnée dans la configuration d'appel, on considère une correction de longueur par défault
            if isfield(config, 'CorrectionLength')
                tc = config.ThicknessCorrection;
            else
                tc = 2 * 0.48 * sqrt(pi * pr^2) * (1 - 1.14 * sqrt(phi)); % Allard-Insgard ([1] après eq.9, p.4)
                config.ThicknessCorrection = tc;
            end

            % Coefficient de perméabilité pour une perforation circulaire (Carman)
            k0 = 2; % [4] p.8 

            % Rayon Hydraulique (= rayon de perforation)
            rh = pr; % [4] p.8 

            % La classe n'a pas directement accès aux propriétés de l'air
            sig = @(env) 4 * k0 * env.air.parameters.eta / (phi * rh^2); % [1] p.5 entre eq. 11 et eq.12 

            % On tient compte de la correction de longueur dans la tortuosité
            tor = 1 + tc / t;

            perforations_section = s * phi;

            % On créer la configuration 
            config = perso_transfer_fields(classJCA_Rigid.create_config(phi, tor, sig, rh, rh, t, perforations_section), config);

            config.PerforationsSection = perforations_section;

            % On appelle le superconstructeur 
            obj@classJCA_Rigid(config);
        end
    end

    methods (Static, Access = public)

        function config = create_config(plate_porosity, perforations_radius, plate_thickness, plate_section, varargin)
            % Cette méthode permet de créer une configuration d'appel spéciale dans le cas ou les perforations de la MPP sont cylindriques
            
            config = struct();
            config.PlatePorosity = plate_porosity;
            config.PerforationsRadius = perforations_radius;
            config.PlateThickness = plate_thickness;
            config.PlateSection = plate_section;

            % Si une longueur de correction est donnée 
            if nargin > 4
                config.ThicknessCorrection = varargin{1};
            end
        end   
     
        function validate()

            % close all 
            figure()
            title('Validation Circular MPP')
            
            % Données de référence : [1], fig. 4, p. 10
            
            % Paramètres de la configuration

            s = 1; % section arbitraire

            % panel 1
            phi = 0.1; % porosité de la plaque
            d = 1e-3; % épaisseur de la plaque
            r = 0.5e-3; % diamètre des perforations
            MPP = classMPP_Circular(classMPP_Circular.create_config(phi, r, d, s));
            
            % foam 2
            phip = 0.98;
            torp = 1.5;
            sigp = 50000;
            vlp = 100e-6;
            tlp = 130e-6;
            D = 20e-3; % épaisseur de la cavité arrière
            Porous = classJCA_Rigid(classJCA_Rigid.create_config(phip, torp, sigp, vlp, tlp, D, s));

            % création de l'environnement
            env = create_environnement(23, 100800, 22, 1, 5000, 5000);
            
            % création de l'élement composé d'une plaque et d'une cavité
 
            E = classelement(classelement.create_config({MPP, Porous}, 'closed', s));
            
            cavity = classcavity(classcavity.create_config(0.099, s));
            % E = classelement(classelement.create_config({MPP, cavity}, 'closed', s));
            % E = classelement({SC1, MPP, SC2, cavity}, 'closed');

            alpha_model = E.alpha(env);

            % importation des données de références
            data = csvread('Atalla2007_fig4_green_square.txt');
            [x_data, y_data] = interpole_et_lisse(data(:, 1), data(:, 2), 1000, 0.05);
            
            % affichage des résultats
            figure()
            hold on
            xlabel("Fréquence (Hz)")
            ylabel("Coefficient d'Absorption")
            ylim([0 1])
            subtitle("Atalla2007 - fig. 4 - p. 10")

            plot(env.w / (2*pi), alpha_model, 'Color', 'b', 'LineWidth', 1);
            plot(x_data, y_data, 'Color', 'g','LineWidth', 1, 'LineStyle', '--');
            legend('Modèle', 'Données de références')
        end
    end
end