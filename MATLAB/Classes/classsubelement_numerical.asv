classdef classsubelement_numerical < classsubelement

    methods
        function obj = classsubelement_numerical(config)
            
            obj@classsubelement(config)
        end

        function Zs = surface_impedance(obj, env)
            
            % Cette fonction récupère le vecteur support de l'environnement env.w /(2*pi), 
            % le compare au vecteur support importé obj.Configuration.FrequencySupport 
            % et interpole l'impédance de surface importée obj.Configuration.SurfaceImpedance 
            % sur celui-ci :
            % - si un point du support se situe entre deux points importés,
            %   on réalise une interpolation linéaire pour définir sa valeur (complexe)
            % - si le point du support est en dehors du support importé, 
            %   on attribue la valeur NaN à l'impédance de surface
        
            % Récupération du vecteur de fréquences de l'environnement
            freq_env = env.w / (2 * pi);
        
            % Récupération des données de la configuration
            freq_support = obj.Configuration.FrequencySupport;
            Zs_imported = obj.Configuration.SurfaceImpedance;
        
            % Initialisation du vecteur d'impédance de surface
            Zs = nan(size(freq_env));
        
            % Boucle sur chaque fréquence de l'environnement
            for i = 1:length(freq_env)
                % Vérification si la fréquence est dans l'intervalle supporté
                if freq_env(i) >= min(freq_support) && freq_env(i) <= max(freq_support)
                    % Interpolation linéaire de l'impédance complexe
                    Zs(i) = interp1(freq_support, Zs_imported, freq_env(i), 'linear', NaN);
                else
                    % Fréquence en dehors du support, valeur NaN
                    Zs(i) = NaN;
                end
            end
        end
    end

    methods (Static, Access = public)

        function config = create_config(frequency_support, surface_impedance, input_surface)
            
            config = struct();
            config.FrequencySupport = frequency_support;
            config.SurfaceImpedance = surface_impedance;
            config.InputSurface = input_surface
        end

        function validate()
           % Pour valider la fonction d'importation externe
        end
    end
end